package example

import (
	"context"
	"go.opentelemetry.io/otel"
	otelCodes "go.opentelemetry.io/otel/codes"
)

func AnonymousFuncWithoutContext() func() (name string, err error) {
	return func() (name string, err error) {
		return "fluffer", nil
	}
}

func AnonymousFunc() func(ctx context.Context) (name string, err error) {
	return func(ctx context.Context) (name string, err error) {
		ctx, span := otel.Tracer("app").Start(ctx, "anonymous")
		defer span.End()
		defer func() {
			if err != nil {
				span.SetStatus(otelCodes.Error, "error")
				span.RecordError(err)
			}
		}()
//line basic.go:14

		return "fluffer", nil
	}
}

func AnonymousFuncSkippedNoContext(ctx context.Context) func() (name string, err error) {
	ctx, span := otel.Tracer("app").Start(ctx, "AnonymousFuncSkippedNoContext")
	defer span.End()
//line basic.go:19

	return func() (name string, err error) {
		return "fluffer", nil
	}
}

func AnonymousFuncSkippedAnonymousContext(ctx context.Context) func(_ context.Context) (name string, err error) {
	ctx, span := otel.Tracer("app").Start(ctx, "AnonymousFuncSkippedAnonymousContext")
	defer span.End()
//line basic.go:25

	return func(_ context.Context) (name string, err error) {
		return "fluffer", nil
	}
}

type Cat struct{}

func (s Cat) Name(ctx context.Context) (name string, err error) {
	ctx, span := otel.Tracer("app").Start(ctx, "Cat.Name")
	defer span.End()
	defer func() {
		if err != nil {
			span.SetStatus(otelCodes.Error, "error")
			span.RecordError(err)
		}
	}()
//line basic.go:33

	return "fluffer", nil
}

type Apple struct{}

func (s *Apple) MethodWithPointerReciver(ctx context.Context, a int) (err error) {
	ctx, span := otel.Tracer("app").Start(ctx, "Apple.MethodWithPointerReciver")
	defer span.End()
	defer func() {
		if err != nil {
			span.SetStatus(otelCodes.Error, "error")
			span.RecordError(err)
		}
	}()
//line basic.go:39

	return nil
}

func (s Apple) MethodWithValueReciver(ctx context.Context, a int) (err error) {
	ctx, span := otel.Tracer("app").Start(ctx, "Apple.MethodWithValueReciver")
	defer span.End()
	defer func() {
		if err != nil {
			span.SetStatus(otelCodes.Error, "error")
			span.RecordError(err)
		}
	}()
//line basic.go:43

	return nil
}

func (*Apple) MethodWithPointerReciverUnnamed(ctx context.Context, a int) (err error) {
	ctx, span := otel.Tracer("app").Start(ctx, "Apple.MethodWithPointerReciverUnnamed")
	defer span.End()
	defer func() {
		if err != nil {
			span.SetStatus(otelCodes.Error, "error")
			span.RecordError(err)
		}
	}()
//line basic.go:47

	return nil
}

func (Apple) MethodWithValueReciverUnnamed(ctx context.Context, a int) (err error) {
	ctx, span := otel.Tracer("app").Start(ctx, "Apple.MethodWithValueReciverUnnamed")
	defer span.End()
	defer func() {
		if err != nil {
			span.SetStatus(otelCodes.Error, "error")
			span.RecordError(err)
		}
	}()
//line basic.go:51

	return nil
}

func (s *Apple) MethodWithCustomErrorName(ctx context.Context, a int) (errXYZ error) {
	ctx, span := otel.Tracer("app").Start(ctx, "Apple.MethodWithCustomErrorName")
	defer span.End()
	defer func() {
		if errXYZ != nil {
			span.SetStatus(otelCodes.Error, "error")
			span.RecordError(errXYZ)
		}
	}()
//line basic.go:55

	return nil
}

func (s *Apple) MethodWithCustomContextName(myContext context.Context, a int) (err error) {
	myContext, span := otel.Tracer("app").Start(myContext, "Apple.MethodWithCustomContextName")
	defer span.End()
	defer func() {
		if err != nil {
			span.SetStatus(otelCodes.Error, "error")
			span.RecordError(err)
		}
	}()
//line basic.go:59

	return nil
}

func (s *Apple) MethodWithAnonymousContext(_ context.Context, a int) (err error) {
	return nil
}

func Fib(ctx context.Context, n int) int {
	ctx, span := otel.Tracer("app").Start(ctx, "Fib")
	defer span.End()
//line basic.go:67

	if n == 0 || n == 1 {
		return 1
	}
	return Fib(ctx, n-1) + Fib(ctx, n-2)
}

func Basic(ctx context.Context) (err error) {
	ctx, span := otel.Tracer("app").Start(ctx, "Basic")
	defer span.End()
	defer func() {
		if err != nil {
			span.SetStatus(otelCodes.Error, "error")
			span.RecordError(err)
		}
	}()
//line basic.go:74

	return nil
}

func Comment(ctx context.Context) int {
	ctx, span := otel.Tracer("app").Start(ctx, "Comment")
	defer span.End()
//line basic.go:80

	// some-comment first line
	// some-comment second line
	return 43
}

func CommentMultiline() error {
	/*
		a
		b
		c
		d
	*/
	return nil
}

func fib(n int) int {
	if n == 0 || n == 1 {
		return 1
	}
	return fib(n-1) + fib(n-2)
}

func OneLine(n int) int { return fib(n) }

func OneLineTypical(ctx context.Context, n int) (int, error) {
	ctx, span := otel.Tracer("app").Start(ctx, "OneLineTypical")
	defer span.End()
//line basic.go:102
	return fib(n), nil
}

func OneLineWithComment() int { /* comment 1 */ return 42 /* comment 2 */ }

func CustomName(b int, specialCtx context.Context) (specialErr error) {
	specialCtx, span := otel.Tracer("app").Start(specialCtx, "CustomName")
	defer span.End()
	defer func() {
		if specialErr != nil {
			span.SetStatus(otelCodes.Error, "error")
			span.RecordError(specialErr)
		}
	}()
//line basic.go:107

	return nil
}

func MultipleContextMultipleError(a context.Context, b context.Context) (erra error, errorb error) {
	a, span := otel.Tracer("app").Start(a, "MultipleContextMultipleError")
	defer span.End()
	defer func() {
		if erra != nil {
			span.SetStatus(otelCodes.Error, "error")
			span.RecordError(erra)
		}
	}()
//line basic.go:111

	return nil, nil
}

func MultipleContextMultipleErrorCollapsed(a, b context.Context) (erra, errob error) {
	return nil, nil
}

func MultipleErrorNotNamed(ctx context.Context) (error, error) {
	ctx, span := otel.Tracer("app").Start(ctx, "MultipleErrorNotNamed")
	defer span.End()
//line basic.go:119

	return nil, nil
}

func Closure(ctx context.Context) (int, error) {
	ctx, span := otel.Tracer("app").Start(ctx, "Closure")
	defer span.End()
//line basic.go:123

	a := func(x int) (int, error) { return x + 1, nil }
	return a(5)
}

func FunctionCallingAnonymousFunc(ctx context.Context) error {
	ctx, span := otel.Tracer("app").Start(ctx, "FunctionCallingAnonymousFunc")
	defer span.End()
//line basic.go:128

	if err := Exec(ctx, func(ctx context.Context) error {
		ctx, span := otel.Tracer("app").Start(ctx, "anonymous")
		defer span.End()
//line basic.go:129

		return nil
	}); err != nil {
		return err
	}
	return nil
}

func Exec(ctx context.Context, fn func(ctx context.Context) error) error {
	ctx, span := otel.Tracer("app").Start(ctx, "Exec")
	defer span.End()
//line basic.go:137

	return fn(ctx)
}
